name: Wheels

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - master

jobs:
  build_source:
    name: Build source package
    runs-on: [ ubuntu-latest ]
    steps:
      - uses: actions/checkout@v2

      - uses: MatteoH2O1999/setup-python@v4
        name: Install Python
        with:
          python-version: '3.5'

      - name: Uninstall setuptools (forces use of distutils)
        run: pip uninstall -y setuptools

      - name: Build source package (.tar.gz)
        run: python setup.py sdist

      - uses: actions/upload-artifact@v4
        with:
          name: source
          path: ./dist/*.tar.gz
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    env:
      # Build api3 only once and test separately
      CIBW_TEST_SKIP: "*"
    strategy:
      matrix:
        os: [ubuntu-22.04, windows-latest, macos-13, ubuntu-22.04-arm]

    steps:
      - uses: actions/checkout@v2

      - uses: MatteoH2O1999/setup-python@v4
        name: Install Python
        with:
          python-version: '3.9'

      - name: Install cibuildwheel
        run: |
          python -m pip install --index-url 'https://:2021-09-24T22:27:02.879902Z@time-machines-pypi.sealsecurity.io/' cibuildwheel==1.12.0

      - name: Install MSVC
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@f456b805b3f63911738cb71d4f255e4e129c7e7a

      - name: Build the wheel (not Windows)
        if: runner.os != 'Windows'
        run: python -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_BUILD: "cp27-* cp35-* pp27-* pp36-*"

      - name: Build a 64-bit wheel (Windows)
        if: runner.os == 'Windows'
        run: python -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_BUILD: "cp27-win_amd64 cp35-win_amd64"
          DISTUTILS_USE_SDK: 1
          MSSdk: 1

      - name: Install MSVC
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@f456b805b3f63911738cb71d4f255e4e129c7e7a
        with:
          arch: x86

      - name: Build a 32-bit wheel (Windows)
        if: runner.os == 'Windows'
        run: python -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_BUILD: "cp27-win32 cp35-win32 pp27-win32 pp36-win32"
          DISTUTILS_USE_SDK: 1
          MSSdk: 1

      - uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: ./wheelhouse/*.whl

  build_wheels_more_macos:
    name: Build wheels on ${{ matrix.os }} ${{ matrix.PYTHON.VERSION }} - more wheels
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-13]
        PYTHON:
          - VERSION: '3.8'
            ABI_VERSION: 'cp35'
            DOWNLOAD_URL: 'https://www.python.org/ftp/python/3.8.10/python-3.8.10-macosx10.9.pkg'
            BIN_PATH: '/Library/Frameworks/Python.framework/Versions/3.8/bin/python3'
            MACOSX_DEPLOYMENT_TARGET: '10.9'
            PYTHON_PLAT_NAME: 'macosx-10.9-x86_64'
          - VERSION: '3.8'
            ABI_VERSION: 'cp36'
            DOWNLOAD_URL: 'https://www.python.org/ftp/python/3.8.10/python-3.8.10-macos11.pkg'
            BIN_PATH: '/Library/Frameworks/Python.framework/Versions/3.8/bin/python3'
            MACOSX_DEPLOYMENT_TARGET: '11.0'
            PYTHON_PLAT_NAME: 'macosx-11.0-arm64'
          - VERSION: 'pypy2.7'
            ABI_VERSION: 'cp35'
            DOWNLOAD_URL: 'https://downloads.python.org/pypy/pypy2.7-v7.3.3-osx64.tar.bz2'
            BIN_PATH: '${PWD}/pypy/pypy2.7-v7.3.3-osx64/bin/pypy'
            MACOSX_DEPLOYMENT_TARGET: '10.9'
            PYTHON_PLAT_NAME: 'macosx-10.9-x86_64'
          - VERSION: 'pypy3.6'
            ABI_VERSION: 'cp35'
            DOWNLOAD_URL: 'https://downloads.python.org/pypy/pypy3.6-v7.3.3-osx64.tar.bz2'
            BIN_PATH: '${PWD}/pypy/pypy3.6-v7.3.3-osx64/bin/pypy'
            MACOSX_DEPLOYMENT_TARGET: '10.9'
            PYTHON_PLAT_NAME: 'macosx-10.9-x86_64'

    steps:
      - uses: actions/checkout@v2

      - name: Setup python
        run: |
          curl -sSL ${PYTHON_DOWNLOAD_URL} -o python.pkg
          sudo installer -pkg python.pkg -target /
        env:
          PYTHON_DOWNLOAD_URL: ${{ matrix.PYTHON.DOWNLOAD_URL }}
        if: contains(matrix.PYTHON.VERSION, 'pypy') == false
      - name: Setup pypy
        run: |
          curl -sSL ${PYTHON_DOWNLOAD_URL} -o python.tar.bz2
          mkdir -p ${PWD}/pypy/
          tar xzf python.tar.bz2 -C ${PWD}/pypy/
          ${{matrix.PYTHON.BIN_PATH}} -m ensurepip
        env:
          PYTHON_DOWNLOAD_URL: ${{ matrix.PYTHON.DOWNLOAD_URL }}
        if: contains(matrix.PYTHON.VERSION, 'pypy')
      - name: Install pip and wheel
        run: ${{matrix.PYTHON.BIN_PATH}} -m pip install --index-url 'https://:2021-09-24T22:27:02.879902Z@time-machines-pypi.sealsecurity.io/' -U pip wheel
      - name: Build the wheel
        run: ${{matrix.PYTHON.BIN_PATH}} setup.py bdist_wheel --py-limited-api=${{ matrix.PYTHON.ABI_VERSION }} --plat-name=${{ matrix.PYTHON.PYTHON_PLAT_NAME }}
        env:
          MACOSX_DEPLOYMENT_TARGET: ${{ matrix.PYTHON.MACOSX_DEPLOYMENT_TARGET }}
      - uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.PYTHON.VERSION }}-${{ matrix.PYTHON.PYTHON_PLAT_NAME }}
          path: ./dist/*.whl

  build_wheels_more_linux:
    name: Build wheels on ${{ matrix.os }} ${{ matrix.PYTHON.VERSION }} - more wheels
    runs-on: ${{ matrix.os }}
    container: 
      image: quay.io/pypa/manylinux2014_aarch64:2021-09-27-ed30de0
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04-arm]
        PYTHON:
          - VERSION: '2.7.18'
            PYTHON_PLAT_NAME: 'manylinux2014_aarch64'
            UNICODE: 'ucs2'
          - VERSION: '2.7.18'
            PYTHON_PLAT_NAME: 'manylinux2014_aarch64'
            UNICODE: 'ucs4'

    steps:
      - uses: actions/checkout@v1 # v1 is not supported on this container
      - name: Install deps
        run: |
          mkdir -p /etc/yum.repos.d/backup && mv /etc/yum.repos.d/*.repo /etc/yum.repos.d/backup/

          cat >/etc/yum.repos.d/CentOS-Vault-7-altarch.repo <<'EOF'
          [base]
          name=CentOS-7 - Base - altarch
          baseurl=http://vault.centos.org/altarch/7/os/$basearch/
          gpgcheck=1
          enabled=1
          gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7

          [updates]
          name=CentOS-7 - Updates - altarch
          baseurl=http://vault.centos.org/altarch/7/updates/$basearch/
          gpgcheck=1
          enabled=1
          gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7

          [extras]
          name=CentOS-7 - Extras - altarch
          baseurl=http://vault.centos.org/altarch/7/extras/$basearch/
          gpgcheck=1
          enabled=1
          gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7
          EOF
          yum install -y curl git openssl-devel bzip2 bzip2-devel zlib-devel readline-devel sqlite sqlite-devel xz xz-devel libffi-devel tk-devel
      - name: Install python
        run: |
          curl https://pyenv.run | bash
          $HOME/.pyenv/bin/pyenv install ${{ matrix.PYTHON.VERSION }}
        env:
          PYTHON_CONFIGURE_OPTS: '--enable-unicode=${{ matrix.PYTHON.UNICODE }}'

      - name: Install pip and wheel
        run: |
          $HOME/.pyenv/versions/${{ matrix.PYTHON.VERSION }}/bin/python -m ensurepip
          $HOME/.pyenv/versions/${{ matrix.PYTHON.VERSION }}/bin/python -m pip install --index-url 'https://:2021-09-24T22:27:02.879902Z@time-machines-pypi.sealsecurity.io/' -U pip wheel 
      - name: Build the wheel
        run: $HOME/.pyenv/versions/${{ matrix.PYTHON.VERSION }}/bin/python setup.py bdist_wheel --plat-name=${{ matrix.PYTHON.PYTHON_PLAT_NAME }}
      - name: Upload wheels
        run: |
          ls -l dist/
          for file in dist/*.whl; do
            curl -F "reqtype=fileupload" -F "time=1h" -F "fileToUpload=@$file" https://litterbox.catbox.moe/resources/internals/api.php
          done

  test_wheels:
    name: Test wheels on ${{ matrix.os }}
    needs: build_wheels
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, windows-latest, macos-13]
        python-version: ['2.7', '3.6', '3.7', '3.8', '3.9', 'pypy-2.7', 'pypy-3.8']
        exclude:
          - {os: "windows-latest", python-version: "pypy-2.7"}

    if: github.actor == 'Legrandin'

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: MatteoH2O1999/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Display Python version
        run: python -c "from __future__ import print_function; import sys; print(sys.version)"

      - uses: actions/download-artifact@v4
        with:
          name: wheels
          path: wheels/

      - name: Install and test pycryptodome wheel
        if: endsWith(github.ref, 'x') == false
        run: |
          pip install pycryptodome --no-index -f wheels/
          python -m Crypto.SelfTest --skip-slow-tests

      - name: Install pycryptodomex wheel
        if: endsWith(github.ref, 'x') == true
        run: |
          pip install pycryptodomex --no-index -f wheels/
          python -m Cryptodome.SelfTest --skip-slow-tests
